ecmascript:
	标准{
	if(){},for,str.substr()....数据的类型
	}
	dom
	bom
	let var const
	ES6:抓重点，抓常用，多用，不常用的，多翻几次文档。
	ES6 既是一个历史名词，也是一个泛指， ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”
	变量：
		var a = 10;
		a++
	常量(不可变的量)：const,声明立刻赋值才能使用。
		var div = document.getElementById('div');
		div.style...
	使用let声明一个变量的时候不会自动在window下挂上这个变量
	注意：重复声明会报错
	let a = 20
	let a = 5;
在ES6中{}就叫块
	块级作用域指一个变量或者函数只在该区域才起作用。
	使用的时候，let被{}所包裹，不能重复命名（包括函数中当前域下的参数）
	如果函数中的参数名字与函数内的名字一样，那么可以使用{}将let的变量
	锁在这个{}的域中，就不会报错了。
	function (a){
		let a = 20;//会报错
	}
	function (a){
		{
			let a = 20;
		}
	}
什么是解构赋值
	ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。
	数组解构：
		把数组中的某个值，对应解析
		var [b,a] = [a,b] ;
	对象解构:
		把对象中对应的值，解析出来
		var {a,b} = {a:10,b:5} ->  a=10,b=5
	要取别名(用:,  解构出来的值:取的别名)：
	var {a:aa,b:bb} = {a:10,b:5}  aa=10,bb=5
数组：
	默认有遍历接口，Symbol.iterator，只要有遍历接口就能使用for of循环
	可以循环数据与类数组。
	在使用的时候，可以用数组实例的keys()方法，找key值
	也可以通过entries来遍历key，vlue。
	for(var [key,val] of arr.entries()){
	 	console.log(key,val);
	 }
	for(var [,val] of arr.entries()){
	 	console.log(val);
	 }
	使用的时候请使用解构赋值的方式去操作。
	注意的是：
		object默认没有遍历接口，所以不能使用for of
Symbol  -> 唯一。
      ES5的对象属性名都是字符串，这容易造成属性名的冲突。
      比如，你使用了一个他人提供的对象，
      但又想为这个对象添加新的方法（mixin模式），
      新方法的名字就有可能与现有方法产生冲突。
      如果有一种机制，保证每个属性的名字都是独一无二的就好了，
      这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。
   let obj = {
     	name:'永生',
     	age:80,
     	fn(){
       	 alert(1)
     	}
   }
    obj[Symbol.fn] = function(){
      alert(2);
    }
    console.log(obj[Symbol.fn]);
ES6的模块：
	import:引入...文件
	export:输出...文件
	let a = 10;
	export {a};
	import a from './src/a.js';
1.自定义事件：
      通过映射，将绑定的函数都放都改事件的数组中，当制定的事件触发的时候，
      循环该数组中的事件函数并且调用。
2.深拷贝核心原理：
      循环数据，查看每个的数据类型是否为对象，如果是对象就继续循环这个对象，
      直到数据中不为对象类型就返回。
3.面向对象小明18岁，住北京，职业前端，他说：今天天气不错
    小明 = {
      age:18,
      address:'北京',
      job:前端,
      say:function(){
        console.log('天天气不错')
      }
    }
    function Person(name,age,job,address){
      this.name = name;
      this.age = age;
      this.job = job;
      this.address = address;
    }
    Person.prototype.say = function(){
      console.log('今天天气不错')
    }
    
    class Person{
      constructor(name,age,job,address){
        this.name = name;
        this.age = age;
        this.job = job;
        this.address = address;
      }
      say(){
        console.log('今天天气不错')
      }
    }
	let p = new Person('小明',18,'前端','北京');
    	p.say();
